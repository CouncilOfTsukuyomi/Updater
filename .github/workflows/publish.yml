name: Manual Build and Release

on:
    workflow_dispatch:
        inputs:
            releaseType:
                description: "Which version increment?"
                required: true
                default: "patch"
                type: choice
                options:
                    - major
                    - minor
                    - patch

permissions:
    contents: write
    issues: write
    pull-requests: write

jobs:
    version-update-and-build:
        runs-on: ubuntu-latest
        steps:
            - uses: actions/create-github-app-token@v1
              id: app-token
              with:
                  app-id: ${{ vars.APP_ID }}
                  private-key: ${{ secrets.APP_PRIVATE_KEY }}

            - name: Checkout Code
              uses: actions/checkout@v4
              with:
                  fetch-depth: 0
                  submodules: recursive
                  token: ${{ steps.app-token.outputs.token }}

            - name: Set User
              run: |
                  git config user.name "github-actions[bot]"
                  git config user.email "41898282+github-actions[bot]@users.noreply.github.com"

            - name: Install GitVersion
              run: dotnet tool install --global GitVersion.Tool
            
            - name: Decide GitVersion Bump
              shell: bash
              run: |
                  if [ "${{ github.event.inputs.releaseType }}" == "major" ]; then
                    echo "GitVersion_BumpMajor=true" >> $GITHUB_ENV
                  elif [ "${{ github.event.inputs.releaseType }}" == "minor" ]; then
                    echo "GitVersion_BumpMinor=true" >> $GITHUB_ENV
                  else
                    echo "GitVersion_BumpPatch=true" >> $GITHUB_ENV
                  fi

            - name: Run GitVersion
              id: gitversion
              shell: bash
              run: |
                  # Use /overrideconfig so GitVersion definitely bumps the correct slot.
                  if [ "${{ github.event.inputs.releaseType }}" == "major" ]; then
                    OUTPUT=$(dotnet-gitversion /overrideconfig bump=major /output json)
                  elif [ "${{ github.event.inputs.releaseType }}" == "minor" ]; then
                    OUTPUT=$(dotnet-gitversion /overrideconfig bump=minor /output json)
                  else
                    OUTPUT=$(dotnet-gitversion /overrideconfig bump=patch /output json)
                  fi
                  
                  echo "version=$(echo "$OUTPUT" | jq -r '.MajorMinorPatch')" >> $GITHUB_OUTPUT
                  echo "full_semver=$(echo "$OUTPUT" | jq -r '.FullSemVer')" >> $GITHUB_OUTPUT

            - name: Update `Directory.Build.props`
              run: |
                  VERSION=${{ steps.gitversion.outputs.version }}
                  MAJOR=$(echo "$VERSION" | cut -d'.' -f1)
                  MINOR=$(echo "$VERSION" | cut -d'.' -f2)
                  PATCH=$(echo "$VERSION" | cut -d'.' -f3)
                  
                  sed -i "s|<MajorVersion>.*</MajorVersion>|<MajorVersion>${MAJOR}</MajorVersion>|" Directory.Build.props
                  sed -i "s|<MinorVersion>.*</MinorVersion>|<MinorVersion>${MINOR}</MinorVersion>|" Directory.Build.props
                  sed -i "s|<PatchVersion>.*</PatchVersion>|<PatchVersion>${PATCH}</PatchVersion>|" Directory.Build.props

            - name: Commit Updated `Directory.Build.props`
              run: |
                  git config --local user.name "GitHub Actions"
                  git config --local user.email "actions@github.com"
                  git add Directory.Build.props
                  git commit -m "chore: update version to ${{ steps.gitversion.outputs.full_semver }}"
                  git push
              env:
                  GITHUB_TOKEN: ${{ secrets.GITHUB_TOKEN }}

            - name: Set Up .NET (v9)
              uses: actions/setup-dotnet@v4
              with:
                  dotnet-version: 9.x

            - name: Restore Dependencies
              run: dotnet restore

            - name: Build Solution
              run: dotnet build --configuration Release

            - name: Publish Updater (Windows)
              env:
                  SENTRY_DSN: ${{ secrets.SENTRY_DSN }}
              run: |
                  dotnet publish Updater \
                    -c Release \
                    -p:PublishSingleFile=true \
                    --self-contained=true \
                    -p:DebugType=None -p:DebugSymbols=false \
                    -r win-x64 \
                    -o ./publish/windows \
                    -f net9.0

            - name: Upload Windows Artifact
              uses: actions/upload-artifact@v4.5.0
              with:
                  name: Updater-Windows
                  path: ./publish/windows
    
    create-release:
        runs-on: ubuntu-latest
        needs: version-update-and-build
        steps:
            - name: Checkout Code
              uses: actions/checkout@v4
              with:
                  fetch-depth: 0
                  submodules: recursive

            - name: Install GitVersion
              run: dotnet tool install --global GitVersion.Tool

            - name: Run GitVersion
              id: gitversion
              shell: bash
              run: |
                  OUTPUT=$(dotnet-gitversion /output json)
                  FULL_SEMVER=$(echo "$OUTPUT" | jq -r '.FullSemVer')
                  MAJORMINORPATCH=$(echo "$OUTPUT" | jq -r '.MajorMinorPatch')
                  PREVIOUS_TAG=$(echo "$OUTPUT" | jq -r '.PreviousTag // ""')
                  
                  echo "FULL_SEMVER=$FULL_SEMVER" >> $GITHUB_ENV
                  echo "MAJORMINORPATCH=$MAJORMINORPATCH" >> $GITHUB_ENV
                  echo "PREVIOUS_TAG=$PREVIOUS_TAG" >> $GITHUB_ENV

            - name: Get Latest Release from GitHub
              id: get-release
              uses: actions/github-script@v7
              with:
                  script: |
                      const { data: releases } = await github.rest.repos.listReleases({
                        owner: context.repo.owner,
                        repo: context.repo.repo
                      });
                      if (!releases || releases.length === 0) {
                        core.setOutput("latest_tag", "");
                      } else {
                        core.setOutput("latest_tag", releases[0].tag_name);
                      }

            - name: Compare GitHub Tag with GitVersion (SemVer)
              shell: bash
              run: |
                  GH_LATEST_TAG_RAW="${{ steps.get-release.outputs.latest_tag }}"
                  FULL_SEMVER="${{ env.FULL_SEMVER }}"
                  
                  if [ -z "$GH_LATEST_TAG_RAW" ]; then
                    echo "No previous GitHub release found. We'll do a brand-new release."
                    exit 0
                  fi
                  
                  GH_LATEST_TAG="${GH_LATEST_TAG_RAW#v}"
                  CLEAN_SEMVER="${FULL_SEMVER%%-*}"
                  
                  GH_MAJOR="$(echo "$GH_LATEST_TAG"   | cut -d'.' -f1)"
                  GH_MINOR="$(echo "$GH_LATEST_TAG"   | cut -d'.' -f2)"
                  GH_PATCH="$(echo "$GH_LATEST_TAG"   | cut -d'.' -f3)"
                  GIT_MAJOR="$(echo "$CLEAN_SEMVER"   | cut -d'.' -f1)"
                  GIT_MINOR="$(echo "$CLEAN_SEMVER"   | cut -d'.' -f2)"
                  GIT_PATCH="$(echo "$CLEAN_SEMVER"   | cut -d'.' -f3)"
                  
                  echo "GitHub’s release version: $GH_MAJOR.$GH_MINOR.$GH_PATCH"
                  echo "GitVersion’s version:    $GIT_MAJOR.$GIT_MINOR.$GIT_PATCH"
                  
                  if [ "$GIT_MAJOR" -gt "$GH_MAJOR" ] || \
                     { [ "$GIT_MAJOR" -eq "$GH_MAJOR" ] && [ "$GIT_MINOR" -gt "$GH_MINOR" ]; } || \
                     { [ "$GIT_MAJOR" -eq "$GH_MAJOR" ] && [ "$GIT_MINOR" -eq "$GH_MINOR" ] && [ "$GIT_PATCH" -gt "$GH_PATCH" ]; }; then
                    echo "GitVersion is NEWER than GitHub's latest tag. Proceed with releasing."
                  else
                    echo "GitVersion is NOT newer. You might decide to skip or handle differently."
                  fi

            - name: Generate Release Notes
              id: gen-notes
              shell: bash
              run: |
                  GITVERSION_PREVIOUS_TAG="${{ env.PREVIOUS_TAG }}"
                  GH_LATEST_TAG_RAW="${{ steps.get-release.outputs.latest_tag }}"
                  FALLBACK_TAG="${GH_LATEST_TAG_RAW}"
                  
                  if [ -z "$GITVERSION_PREVIOUS_TAG" ] && [ -n "$GH_LATEST_TAG_RAW" ]; then
                    echo "No GitVersion previous tag found; falling back to GitHub release tag '$FALLBACK_TAG'."
                    GITVERSION_PREVIOUS_TAG="$FALLBACK_TAG"
                  fi
                  
                  if [ -z "$GITVERSION_PREVIOUS_TAG" ]; then
                    echo "COMMITS<<EOF" >> "$GITHUB_ENV"
                    echo "No previous tag — skipping commit history." >> "$GITHUB_ENV"
                    echo "EOF" >> "$GITHUB_ENV"
                  else
                    COMMITS=$(git log "$GITVERSION_PREVIOUS_TAG..HEAD" --pretty=format:'- %s (%h)' \
                      | grep -v "chore: update version to")
                  
                    echo "COMMITS<<EOF" >> "$GITHUB_ENV"
                    echo "$COMMITS" >> "$GITHUB_ENV"
                    echo "EOF" >> "$GITHUB_ENV"
                  fi

            - name: Create GitHub Release
              id: create_release
              uses: actions/create-release@v1
              with:
                  tag_name: v${{ env.MAJORMINORPATCH }}
                  release_name: Release v${{ env.MAJORMINORPATCH }}
                  body: |
                      Changes (since last release):
                      ${{ env.COMMITS }}
                  draft: false
                  prerelease: false
              env:
                  GITHUB_TOKEN: ${{ secrets.GITHUB_TOKEN }}

            - name: Download Windows Artifact
              uses: actions/download-artifact@v4
              with:
                  name: Updater-Windows
                  path: ./publish/windows

            - name: Zip Windows build
              run: |
                  cd ./publish/windows
                  zip -r ../Updater-windows.zip .
                  cd ../..

            - name: Upload Windows ZIP to Release
              uses: actions/upload-release-asset@v1
              with:
                  upload_url: ${{ steps.create_release.outputs.upload_url }}
                  asset_path: ./publish/Updater-windows.zip
                  asset_name: Updater-Windows.zip
                  asset_content_type: application/zip
              env:
                  GITHUB_TOKEN: ${{ secrets.GITHUB_TOKEN }}