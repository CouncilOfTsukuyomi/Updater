name: Manual Build and Release
on:
    workflow_dispatch:
        
permissions: 
    contents: write
    issues: write
    pull-requests: write
    

jobs:
    version-update-and-build:
        runs-on: ubuntu-latest
        steps:
            - name: Checkout Code
              uses: actions/checkout@v4
              with:
                  fetch-depth: 0
                  submodules: recursive

            - name: Install GitVersion
              run: dotnet tool install --global GitVersion.Tool

            - name: Run GitVersion
              id: gitversion
              shell: bash
              run: |
                  OUTPUT=$(dotnet-gitversion /output json)
                  echo "version=$(echo "$OUTPUT" | jq -r '.MajorMinorPatch')" >> $GITHUB_OUTPUT

            - name: Update `Directory.Build.props`
              run: |
                  VERSION=${{ steps.gitversion.outputs.version }}
                  MAJOR=$(echo "$VERSION" | cut -d'.' -f1)
                  MINOR=$(echo "$VERSION" | cut -d'.' -f2)
                  PATCH=$(echo "$VERSION" | cut -d'.' -f3)
                  
                  sed -i "s|<MajorVersion>.*</MajorVersion>|<MajorVersion>${MAJOR}</MajorVersion>|" Directory.Build.props
                  sed -i "s|<MinorVersion>.*</MinorVersion>|<MinorVersion>${MINOR}</MinorVersion>|" Directory.Build.props
                  sed -i "s|<PatchVersion>.*</PatchVersion>|<PatchVersion>${PATCH}</PatchVersion>|" Directory.Build.props

            - name: Commit Updated `Directory.Build.props`
              run: |
                  git config --local user.name "GitHub Actions"
                  git config --local user.email "actions@github.com"
                  git add Directory.Build.props
                  git commit -m "chore: update version to ${{ steps.gitversion.outputs.FullSemVer }}"
                  git push
              env:
                  GITHUB_TOKEN: ${{ secrets.GITHUB_TOKEN }}

            - name: Set Up .NET (v9)
              uses: actions/setup-dotnet@v4
              with:
                  dotnet-version: 9.x

            - name: Restore Dependencies
              run: dotnet restore

            - name: Build Solution
              run: dotnet build --configuration Release
              
            - name: Publish Updater (Windows)
              run: |
                  dotnet publish Updater \
                    -c Release \
                    -p:PublishSingleFile=true \
                    --self-contained=true \
                    -p:DebugType=None -p:DebugSymbols=false \
                    -r win-x64 \
                    -o ./publish/windows \
                    -f net9.0
            
            - name: Upload Windows Artifact
              uses: actions/upload-artifact@v4.5.0
              with:
                  name: Updater-Windows
                  path: ./publish/windows
    
    create-release:
        runs-on: ubuntu-latest
        needs: version-update-and-build
        steps:
            - name: Checkout Code
              uses: actions/checkout@v4
              with: 
                  fetch-depth: 0
                  submodules: recursive

            - name: Install GitVersion
              run: dotnet tool install --global GitVersion.Tool

            - name: Run GitVersion
              id: gitversion
              shell: bash
              run: |
                  OUTPUT=$(dotnet-gitversion /output json)

            - name: Generate Release Notes
              id: gen-notes
              run: |
                  PREVIOUS_TAG="${{ steps.gitversion.outputs.PreviousTag }}"
                  if [ -z "$PREVIOUS_TAG" ]; then
                    # If there's no previous tag, fall back to the first commit
                    PREVIOUS_TAG=$(git rev-list --max-parents=0 HEAD)
                  fi
                  
                  # Gather commit messages from the previous tag to HEAD
                  # Then filter out the line with 'chore: update version to'
                  COMMITS=$(git log "$PREVIOUS_TAG..HEAD" --pretty=format:'- %s (%h)' | grep -v "chore: update version to")
                  
                  echo "COMMITS<<EOF" >> $GITHUB_ENV
                  echo "$COMMITS" >> $GITHUB_ENV
                  echo "EOF" >> $GITHUB_ENV

            - name: Create GitHub Release
              uses: actions/create-release@v1
              with:
                  tag_name: ${{ steps.gitversion.outputs.FullSemVer }}
                  release_name: Release ${{ steps.gitversion.outputs.FullSemVer }}
                  body: |
                      Changes (since last release):
                      ${{ env.COMMITS }}
                  draft: false
                  prerelease: ${{ steps.gitversion.outputs.PreReleaseLabel != '' }}
              env:
                  GITHUB_TOKEN: ${{ secrets.GITHUB_TOKEN }}
                  
            - name: Zip Windows build
              run: |
                  cd ./publish/windows
                  zip -r ../Updater-windows.zip . 
                  cd ../..
        
            - name: Upload Windows ZIP to Release
              uses: actions/upload-release-asset@v1
              with:
                  upload_url: ${{ steps.create_release.outputs.upload_url }}
                  asset_path: ./publish/Updater-windows.zip
                  asset_name: Updater-Windows.zip
                  asset_content_type: application/zip
              env:
                  GITHUB_TOKEN: ${{ secrets.GITHUB_TOKEN }}