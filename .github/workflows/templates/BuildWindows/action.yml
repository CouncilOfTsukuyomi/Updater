name: 'Build Windows'
description: 'Build Updater for Windows x64'
inputs:
    source_branch:
        description: 'Source branch to checkout'
        required: true
    version:
        description: 'Version string for the build'
        required: true
    configuration:
        description: 'Build configuration (Release/Debug)'
        required: false
        default: 'Release'
    run_tests:
        description: 'Whether to run tests'
        required: false
        default: 'true'
    sentry_dsn:
        description: 'Sentry DSN for error tracking'
        required: false
outputs:
    artifact_name:
        description: 'Name of the uploaded artifact'
        value: ${{ steps.set-outputs.outputs.artifact_name }}
    zip_filename:
        description: 'Name of the created zip file'
        value: ${{ steps.set-outputs.outputs.zip_filename }}
runs:
    using: 'composite'
    steps:
        - name: Checkout Code
          uses: actions/checkout@v4
          with:
              fetch-depth: 0
              submodules: recursive
              ref: ${{ inputs.source_branch }}

        - name: Cache NuGet packages
          uses: actions/cache@v4
          with:
              path: ~/.nuget/packages
              key: ${{ runner.os }}-nuget-${{ hashFiles('**/*.csproj', '**/packages.lock.json') }}
              restore-keys: |
                  ${{ runner.os }}-nuget-

        - name: Set Up .NET (v9)
          uses: actions/setup-dotnet@v4
          with:
              dotnet-version: 9.x

        - name: Restore Dependencies
          shell: bash
          run: dotnet restore

        - name: Build Solution
          shell: bash
          run: dotnet build --configuration ${{ inputs.configuration }} --verbosity minimal

        - name: Run Tests
          if: ${{ inputs.run_tests == 'true' }}
          shell: bash
          run: dotnet test --configuration ${{ inputs.configuration }} --no-build --verbosity normal
          continue-on-error: true

        - name: Publish Solution Components
          shell: bash
          env:
              SENTRY_DSN: ${{ inputs.sentry_dsn }}
          run: |
              # Create main publish directory
              mkdir -p "./publish/Updater-win-x64"
              
              projects=("Updater")
              
              for project in "${projects[@]}"; do
                temp_dir="./publish/temp-$(echo $project | tr '[:upper:]' '[:lower:]')-win-x64"
              
                echo "Publishing $project..."
                dotnet publish "$project" \
                  -c ${{ inputs.configuration }} \
                  -p:PublishSingleFile=true \
                  -p:PublishReadyToRun=true \
                  --self-contained=true \
                  -p:DebugType=None -p:DebugSymbols=false \
                  -r win-x64 \
                  -o "$temp_dir" \
                  -f net9.0
              
                # Move files to main directory
                cp -r "$temp_dir/"* "./publish/Updater-win-x64/"
              
                # Clean up temp directory
                rm -rf "$temp_dir"
              done

        - name: Validate Executables
          shell: pwsh
          run: |
              $exeFiles = Get-ChildItem -Path "./publish/Updater-win-x64/" -Filter "*.exe"
              if ($exeFiles.Count -eq 0) {
                Write-Error "No executable files found!"
                exit 1
              }
              
              foreach ($exe in $exeFiles) {
                if ($exe.Length -eq 0) {
                  Write-Error "Error: $($exe.Name) is empty"
                  exit 1
                }
                $sizeKB = [math]::Round($exe.Length / 1KB, 2)
                Write-Host "✓ $($exe.Name) - $sizeKB KB"
              }

        - name: Create Release ZIP
          shell: pwsh
          run: |
              Set-Location "./publish"
              $zipName = "Updater-Windows-x64.v${{ inputs.version }}.zip"
              Compress-Archive -Path "Updater-win-x64/*" -DestinationPath $zipName
              Set-Location ".."

        - name: Set Outputs
          id: set-outputs
          shell: pwsh
          run: |
              $artifactName = "Updater-Windows-x64-v${{ inputs.version }}"
              $zipFileName = "Updater-Windows-x64.v${{ inputs.version }}.zip"
              
              echo "artifact_name=$artifactName" >> $env:GITHUB_OUTPUT
              echo "zip_filename=$zipFileName" >> $env:GITHUB_OUTPUT

        - name: Upload Build Artifacts
          uses: actions/upload-artifact@v4
          with:
              name: ${{ steps.set-outputs.outputs.artifact_name }}
              path: ./publish/${{ steps.set-outputs.outputs.zip_filename }}
              retention-days: 6